// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TictactoeAIGameClient is the client API for TictactoeAIGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TictactoeAIGameClient interface {
	GetScore(ctx context.Context, in *RequestScore, opts ...grpc.CallOption) (*Score, error)
	StartGame(ctx context.Context, opts ...grpc.CallOption) (TictactoeAIGame_StartGameClient, error)
}

type tictactoeAIGameClient struct {
	cc grpc.ClientConnInterface
}

func NewTictactoeAIGameClient(cc grpc.ClientConnInterface) TictactoeAIGameClient {
	return &tictactoeAIGameClient{cc}
}

func (c *tictactoeAIGameClient) GetScore(ctx context.Context, in *RequestScore, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/tictactoe.TictactoeAIGame/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tictactoeAIGameClient) StartGame(ctx context.Context, opts ...grpc.CallOption) (TictactoeAIGame_StartGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &TictactoeAIGame_ServiceDesc.Streams[0], "/tictactoe.TictactoeAIGame/StartGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &tictactoeAIGameStartGameClient{stream}
	return x, nil
}

type TictactoeAIGame_StartGameClient interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type tictactoeAIGameStartGameClient struct {
	grpc.ClientStream
}

func (x *tictactoeAIGameStartGameClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tictactoeAIGameStartGameClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TictactoeAIGameServer is the server API for TictactoeAIGame service.
// All implementations must embed UnimplementedTictactoeAIGameServer
// for forward compatibility
type TictactoeAIGameServer interface {
	GetScore(context.Context, *RequestScore) (*Score, error)
	StartGame(TictactoeAIGame_StartGameServer) error
	mustEmbedUnimplementedTictactoeAIGameServer()
}

// UnimplementedTictactoeAIGameServer must be embedded to have forward compatible implementations.
type UnimplementedTictactoeAIGameServer struct {
}

func (UnimplementedTictactoeAIGameServer) GetScore(context.Context, *RequestScore) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedTictactoeAIGameServer) StartGame(TictactoeAIGame_StartGameServer) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedTictactoeAIGameServer) mustEmbedUnimplementedTictactoeAIGameServer() {}

// UnsafeTictactoeAIGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TictactoeAIGameServer will
// result in compilation errors.
type UnsafeTictactoeAIGameServer interface {
	mustEmbedUnimplementedTictactoeAIGameServer()
}

func RegisterTictactoeAIGameServer(s grpc.ServiceRegistrar, srv TictactoeAIGameServer) {
	s.RegisterService(&TictactoeAIGame_ServiceDesc, srv)
}

func _TictactoeAIGame_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TictactoeAIGameServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TictactoeAIGame/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TictactoeAIGameServer).GetScore(ctx, req.(*RequestScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _TictactoeAIGame_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TictactoeAIGameServer).StartGame(&tictactoeAIGameStartGameServer{stream})
}

type TictactoeAIGame_StartGameServer interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type tictactoeAIGameStartGameServer struct {
	grpc.ServerStream
}

func (x *tictactoeAIGameStartGameServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tictactoeAIGameStartGameServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TictactoeAIGame_ServiceDesc is the grpc.ServiceDesc for TictactoeAIGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TictactoeAIGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TictactoeAIGame",
	HandlerType: (*TictactoeAIGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _TictactoeAIGame_GetScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGame",
			Handler:       _TictactoeAIGame_StartGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tictactoe.proto",
}
