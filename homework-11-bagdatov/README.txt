```bash
protoc --go_out=. --go_opt=paths=source_relative     --go-grpc_out=. --go-grpc_opt=paths=source_relative     tictactoe.proto
```

Концепция игры тяжело ложится на работу через gRPC.
Такие сложные структуры как двумерные массивы в протобафе напрямую не поддерживаются.
В итоге кодогенрация от protoc'a реализуют на выходе ужасные структуры и интерфейсы.

Поле is_win пришлось сделать oneof полем иначе по умолчанию оно всегда было бы false.
То есть ты всегда проиграл. Это еще отчасти из-за того что в proto3 убрали возможность ставить optional поля.

Код вышел нечитабельным, не горжусь, но хоть сделал.
---------



Необходимо реализовать gRPC сервер для игры в "Крестики-нолики"

Игровое поле будет представлять собой матрицу 3 x 3, где поле с 
координатами (0, 0) - это верхний левый угол, а поле с координатами
(2, 2) - правый нижний угол.

Необходимо реализовать 2 метода
1. GetScore - получить текущий счет игры. gRPC сервер должен вернуть 2 числовых поля:
    1.1 handsome_score - счет gRPC клиента
    1.2 super_AI_score - счет gRPC сервера

2. StartGame - метод для игры. Данный RPC будет bidirectional. gRPC клиент посылает
gRPC серверу координаты своего хода, а gRPC сервер в свою очередь возвращает либо
ошибку (например, поле уже занято, либо индексы вышли за границы), либо матрицу 3x3
c текущим игровым полем и поле "is_win", которое будет равно true, если gRPC клиент
победил и false иначе. Каждое значение матрицы - число, которое может принимать 3
значения: -1 - поле не занято, 1 - крестик, 0 - нолик. Для простоты будем считать, что
первым всегда начинает ход gRPC клиент и играет он всегда крестиками. Также для простоты
gRPC сервер будет делать абсолютно рандомные ходы.

Помимо gRPC сервера необоходимо будет реализовать gRPC клиента, который в терминале позволит
играть в игру. Необходимо будет реализовать простой ввод-вывод (ввод - координаты хода. вывод -
текущее игровое поле). Также реализовать небольшой интерактивный интерфейс, позволяющий начать
игру еще раз или посмотреть текущий счет

Структура директорий:
    * grpc_client - здесь пишем код gRPC клиента с консольным вводом-выводом
    * grpc_server - здесь пишем код gRPC сервера
    * proto - здесь описываем и компилируем свои proto структуры

Задание со звездочкой:
Почитать про minimax алгоритм и реализовать умный gRPC сервер, который делает уже осознанные ходы

Удачи! ^_^
